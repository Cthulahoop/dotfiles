# --------------------------------------------------
# ENABLE COLOR
# --------------------------------------------------

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
fi;

# --------------------------------------------------
# STANDARD COLOR HELPER VARS
# --------------------------------------------------

# Reset
color_off='\[\e[0m\]'       # Text Reset

# Regular Colors
black='\[\e[0;30m\]'        # Black
red='\[\e[0;31m\]'          # Red
green='\[\e[0;32m\]'        # Green
yellow='\[\e[0;33m\]'       # Yellow
blue='\[\e[0;34m\]'         # Blue
purple='\[\e[0;35m\]'       # Purple/Pink
cyan='\[\e[0;36m\]'         # Cyan
white='\[\e[0;37m\]'        # White

# Dark Colors
dblack='\[\e[2;30m\]'       # Black
dred='\[\e[2;31m\]'         # Red
dgreen='\[\e[2;32m\]'       # Green
dyellow='\[\e[2;33m\]'      # Yellow
dblue='\[\e[2;34m\]'        # Blue
dpurple='\[\e[2;35m\]'      # Purple/Pink
dcyan='\[\e[2;36m\]'        # Cyan
dwhite='\[\e[2;37m\]'       # White

# Bold
bblack='\[\e[1;30m\]'       # Black
bred='\[\e[1;31m\]'         # Red
bgreen='\[\e[1;32m\]'       # Green
byellow='\[\e[1;33m\]'      # Yellow
bblue='\[\e[1;34m\]'        # Blue
bpurple='\[\e[1;35m\]'      # Purple
bcyan='\[\e[1;36m\]'        # Cyan
bwhite='\[\e[1;37m\]'       # White

# Underline
ublack='\[\e[4;30m\]'       # Black
ured='\[\e[4;31m\]'         # Red
ugreen='\[\e[4;32m\]'       # Green
uyellow='\[\e[4;33m\]'      # Yellow
ublue='\[\e[4;34m\]'        # Blue
upurple='\[\e[4;35m\]'      # Purple
ucyan='\[\e[4;36m\]'        # Cyan
uwhite='\[\e[4;37m\]'       # White

# Background
on_black='\[\e[40m\]'       # Black
on_red='\[\e[41m\]'         # Red
on_green='\[\e[42m\]'       # Green
on_yellow='\[\e[43m\]'      # Yellow
on_blue='\[\e[44m\]'        # Blue
on_purple='\[\e[45m\]'      # Purple
on_cyan='\[\e[46m\]'        # Cyan
on_white='\[\e[47m\]'       # White

# High Intensity
iblack='\[\e[0;90m\]'       # Black
ired='\[\e[0;91m\]'         # Red
igreen='\[\e[0;92m\]'       # Green
iyellow='\[\e[0;93m\]'      # Yellow
iblue='\[\e[0;94m\]'        # Blue
ipurple='\[\e[0;95m\]'      # Purple
icyan='\[\e[0;96m\]'        # Cyan
iwhite='\[\e[0;97m\]'       # White

# Bold High Intensity
biblack='\[\e[1;90m\]'      # Black
bired='\[\e[1;91m\]'        # Red
bigreen='\[\e[1;92m\]'      # Green
biyellow='\[\e[1;93m\]'     # Yellow
Biblue='\[\e[1;94m\]'       # Blue
bipurple='\[\e[1;95m\]'     # Purple
bicyan='\[\e[1;96m\]'       # Cyan
biwhite='\[\e[1;97m\]'      # White

# High Intensity backgrounds
on_iblack='\[\e[0;100m\]'   # Black
on_ired='\[\e[0;101m\]'     # Red
on_igreen='\[\e[0;102m\]'   # Green
on_iyellow='\[\e[0;103m\]'  # Yellow
on_iblue='\[\e[0;104m\]'    # Blue
on_ipurple='\[\e[0;105m\]'  # Purple
on_icyan='\[\e[0;106m\]'    # Cyan
on_iwhite='\[\e[0;107m\]'   # White


# --------------------------------------------------
# CUSTOM 256 COLOR HELPER VARS
# --------------------------------------------------

# There are 256 colors available to the terminal, but only 16 are used as standard colors. You can
# view a chart of all 256 colors by running my .colors bash file.
# In short:
# Foreground colors are set via "\[\e[38;5;#m\] where the # is a value between 0 and 255
# Background colors are set via "\[\e[48;5;#m\]

# http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x405.html

cblack=$(tput setaf 0);
ctime=$(tput setaf 88);
cbranch=$(tput setaf 237);
cstatus=$(tput setaf 71);

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
  userStyle="$cyan";
else
  userStyle="$dcyan";
fi;

# --------------------------------------------------
# CUSTOM HELPER FOR GIT PROMPT
# --------------------------------------------------

prompt_git() {
  local s='';
  local branchName='';
  local branchColor=${cbranch};
  local statColor=${branchColor};

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null;

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+='+';
        statColor=$(tput setaf 28);
      fi;

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+='*';
        statColor=$(tput setaf 124);
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='?';
      fi;

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+='$';
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    [ -n "${s}" ] && s="${s}";

    echo -e "${1}${cblack}| ${cbranch}(${statColor}${branchName}${s}${cbranch})";
  else
    return;
  fi;
}



# --------------------------------------------------
# THE ACTUAL BASH PROMPT:
# --------------------------------------------------

PS1="$ctime\D{%r}$black | ";        # time
PS1+="\[${userStyle}\]\u";          # user
PS1+="$dcyan@\h$black | ";          # @host
PS1+="$ired\w ";                    # dir
PS1+="\$(prompt_git \"$cbranch\")"; # git repo
PS1+="\n$cyan\$$color_off ";        # input prompt
export PS1

# --------------------------------------------------
# ABOUT PROMPT VARIABLES
# --------------------------------------------------

# Bash uses four prompt strings. They are stored in the variables
# PS1, PS2, PS3, and PS4. The first of these is called the primary
# prompt string; it is your usual shell prompt, and its default
# value is "\s-\v\$ ". Many people like to set their primary prompt
# string to something containing their login name.

# Here is one way to do this:
# PS1="\u--> "

# The \u tells bash to insert the name of the current user into the
# prompt string. If your user name is alice, your prompt string
# will be "alice—>". If you are a C shell user and, like many such
# people, are used to having a history number in your prompt string,
# bash can do this similarly to the C shell: if the sequence \! is
# used in the prompt string, it will substitute the history number.

# Thus, if you define your prompt string to be:
#   PS1="\u \!--> "
# then your prompts will be like alice 1—>, alice 2—>, and so on.

# But perhaps the most useful way to set up your prompt string is
# so that it always contains your current directory. This way, you
# needn't type pwd to remember where you are.

# Here's how:
# PS1="\w--> "

# TABLE OF PROMPT VARIABLES:

# \a  The ASCII bell character (007)
# \A  The current time in 24-hour HH:MM format
# \d  The date in "Weekday Month Day" format
# \D {format} The date in custom format. Braces required [1]
# \e  The ASCII escape character (033)
# \H  The hostname
# \h  The hostname up to the first "."
# \j  The number of jobs currently managed by the shell
# \l  The basename of the shell's terminal device name
# \n  A carriage return and line feed
# \r  A carriage return
# \s  The name of the shell
# \T  The current time in 12-hour HH:MM:SS format
# \t  The current time in HH:MM:SS format
# \@  The current time in 12-hour a.m./p.m. format
# \u  The username of the current user
# \v  The version of bash (e.g., 2.00)
# \V  The release of bash; the version and patchlevel
# \w  The current working directory
# \W  The basename of the current working directory
# \#  The command number of the current command
# \!  The history number of the current command
# \$  If the effective UID is 0, print a #, otherwise print a $
# \nnn    Character code in octal
# \\  Print a backslash
# \[  Begin a sequence of non-printing characters, such as terminal
#           control sequences
# \]  End a sequence of non-printing characters

# [1] The format for \D is passed to strftime(3) and the result is
# inserted into the prompt string. An empty format results in a
# locale-specific time representation.

# --------------------------------------------------
# ADDITIONAL PROMPTS
# --------------------------------------------------

# PS2 is called the secondary prompt string; its default value is >.
# It is used when you type an incomplete line and hit RETURN, as an
# indication that you must finish your command.

# To see changes, you must reload .bash_profile. The easiest way is
# to type the following into terminal:
# . ~/.bash_profile


# --------------------------------------------------
# MY ARCHIVED PROMPTS:
# --------------------------------------------------

# User @ Host – working dir
# export PS1='\u@\h\w$ '
# export PS1='\u@\h \w: '
#
# custom color working dir
# export PS1='\[\e[32;1m\]\w> \[\e[0m\]'
#
# custom color User @ Host, newline working dir
# export PS1='\[\e[30;1m\]\u@\h\n\[\e[0m\]  \w : '
